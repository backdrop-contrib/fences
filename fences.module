<?php
/**
 * @file
 * Fences is a module providing configurable field wrappers.
 */

/**
 * Implements hook_hook_info()
 */
function fences_hook_info() {
  return array(
    'fences_suggestion_info' => array(
      'group' => 'fences',
    ),
    'fences_suggestion_info_alter' => array(
      'group' => 'fences',
    ),
  );
}

/**
 * Implements hook_form_alter()
 */
function fences_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id){
  $suggestion = fences_get_suggestion($form['#instance']['entity_type'], $form['#instance']['bundle'], $form['#instance']['field_name']);

  $form['instance']['fences_wrapper'] = array(
    '#type' => 'select',
    '#title' => t('Wrapper markup'),
    '#default_value' => $suggestion ? $suggestion : 'div',
    '#options' => fences_get_fences_options('field'),
    '#description' => t('Choose the HTML to use to wrap the field.'),
  );
}

/**
 * Returns a ready-made options list of fences suggestions.
 */
function fences_get_fences_options($theme_hook) {
  $options = array();

  // Get the list of suggestions.
  $fences = fences_get_fences_suggestion_info();
  foreach (array_keys($fences[$theme_hook]) as $key) {
    $tags = '';
    if ($fences[$theme_hook][$key]['element'] && $fences[$theme_hook][$key]['element'] != $fences[$theme_hook][$key]['label']) {
      $tags = ' — <' . implode('> <', explode(' ', $fences[$theme_hook][$key]['element'])) . '>';
    }
    $option = $fences[$theme_hook][$key]['label'] . $tags . ' — ' . $fences[$theme_hook][$key]['description'];
    if (empty($fences[$theme_hook][$key]['groups'])) {
      $options[$key] = $option;
    }
    else {
      foreach ($fences[$theme_hook][$key]['groups'] as $optgroup) {
        $options[$optgroup][$key] = $option;
      }
    }
  }

  // Sort the option groups, but put the "no markup" option first.
  ksort($options);
  if ($no_wrapper = $options['no_wrapper']) {
    unset($options['no_wrapper']);
    $options = array('no_wrapper' => $no_wrapper) + $options;
  }

  return $options;
}

/**
 * Returns the wrapper suggestion if it exists.
 *
 * @see field_info_instance()
 *
 * @param $entity_type
 *   The entity type for the instance.
 * @param $bundle_name
 *   The bundle name for the instance.
 * @param $field_name
 *   The field name for the instance.
 *
 * @return
 *   The fences wrapper suggestion for this field, if set.
 */
function fences_get_suggestion($entity_type, $bundle_name, $field_name) {
  $fences = &drupal_static(__FUNCTION__, array());

  if (!isset($fences[$entity_type][$bundle_name][$field_name])) {
    // Instance info is cached, so this isn't as non-performant as it looks.
    $settings = field_info_instance($entity_type, $field_name, $bundle_name);
    $fences[$entity_type][$bundle_name][$field_name] = isset($settings['fences_wrapper']) ? $settings['fences_wrapper'] : '';
  }

  return $fences[$entity_type][$bundle_name][$field_name];
}

/**
 * Implements hook_form_views_ui_add_item_form_alter().
 */
function fences_form_views_ui_add_item_form_alter(&$form, &$form_state, $form_id) {
  // Add our own submit handler to run before the standard one.
  array_unshift($form['buttons']['submit']['#submit'], 'fences_views_ui_add_item_form_submit');
}

/**
 * Submit handler which runs before views_ui_add_item_form_submit().
 */
function fences_views_ui_add_item_form_submit($form, &$form_state) {
  // Sanity check; this temporary property shouldn't exist before the form is
  // submitted.
  if (isset($form_state['view']->fences_new_fields)) {
    unset($form_state['view']->fences_new_fields);
  }
  // Loop through each of the items that were checked.
  if (!empty($form_state['values']['name']) && is_array($form_state['values']['name'])) {
    foreach (array_keys(array_filter($form_state['values']['name'])) as $field) {
      // Check if the checked item is a field api field.
      if (strpos($field, 'field_data_') === 0) {
        // Find the field's proper name.
        list($table, $field_name) = explode('.', $field, 2);
        if ($cut = strpos($field_name, '$')) {
          $field_name = substr($field_name, 0, $cut);
        }
        // Note that the field has just been added by adding it's name to a
        // temporary property of the view.
        $form_state['view']->fences_new_fields[] = $field_name;
      }
    }
  }
}

/**
 * Alter the views field item form to change some of the default values.
 *
 * Note: we only act on an item if it is among the list of fields added to the
 * view's fences_new_fields property in fences_views_ui_add_item_form_submit().
 */
function fences_form_views_ui_config_item_form_alter(&$form, &$form_state, $form_id) {
  // Check if the current item is a field.
  if ($form_state['type'] == 'field' && isset($form_state['view']->fences_new_fields)) {
    if (!empty($form_state['view']->fences_new_fields)) {
      // Check if the current item is one of the fields we marked earlier.
      $key = array_search($form_state['id'], $form_state['view']->fences_new_fields);
      if ($key !== FALSE) {
        // Disable the label option.
        $form['options']['custom_label']['#default_value'] = FALSE;

        // Since we are altering this fieldset's defaults, expand it.
        $form['options']['style_settings']['#collapsed'] = FALSE;

        // Enable the element_type style to be none.
        $form['options']['element_type_enable']['#default_value'] = TRUE;
        $form['options']['element_type']['#default_value'] = 0;

        // Enable the element_wrapper style to be none.
        $form['options']['element_wrapper_type_enable']['#default_value'] = TRUE;
        $form['options']['element_wrapper_type']['#default_value'] = 0;

        // Disable the default element classes.
        $form['options']['element_default_classes']['#default_value'] = FALSE;

        // Set the field settings to use the field_api for rendering.
        $form['options']['field_api_classes']['#default_value'] = TRUE;

        // Remove this field from the list of items to alter.
        unset($form_state['view']->fences_new_fields[$key]);
      }
    }
    // Remove the temporary property set when we added items.
    if (empty($form_state['view']->fences_new_fields)) {
      unset($form_state['view']->fences_new_fields);
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function fences_preprocess_field(&$variables) {
  // Retrieve the configured suggestion.
  $suggestion = fences_get_suggestion($variables['element']['#entity_type'], $variables['element']['#bundle'], $variables['element']['#field_name']);
  if ($suggestion) {
    // Make fences' suggestions low priority by placing them at the front of the queue.
    $suggestion = 'field__fences_' . $suggestion;
    if (count($variables['items']) > 1) {
      // Add a "-multiple" suggestion if there are more than one field items.
      array_unshift($variables['theme_hook_suggestions'], $suggestion . '_multiple');
    }
    array_unshift($variables['theme_hook_suggestions'], $suggestion);
  }
}

/**
 * Implements hook_css_alter().
 */
function fences_css_alter(&$css) {
  // Replace the field module's CSS with our non-floating inline version.
  $path = drupal_get_path('module', 'field') . '/theme';
  if (isset($css[$path . '/field.css']) && $css[$path . '/field.css']['data'] == $path . '/field.css') {
    $css[$path . '/field.css']['data'] = drupal_get_path('module', 'fences') . '/field.css';
    if (isset($css[$path . '/field-rtl.css'])) {
      $css[$path . '/field-rtl.css']['data'] = drupal_get_path('module', 'fences') . '/field-rtl.css';
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function fences_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'theme') {
    // Make fences' hook_theme() run last.
    $group = $implementations['fences'];
    unset($implementations['fences']);
    $implementations['fences'] = $group;
  }
}

/**
 * Implements hook_theme().
 */
function fences_theme($existing, $type, $theme, $path) {
  module_load_include('inc', 'fences', 'fences.admin');
  return _fences_theme($existing, $type, $theme, $path);
}

/**
 * Implements hook_theme_registry_alter().
 */
function fences_theme_registry_alter(&$theme_registry) {
  module_load_include('inc', 'fences', 'fences.admin');
  _fences_theme_registry_alter($theme_registry);
}

/**
 * Preprocess variables for entity.
 */
function fences_preprocess_entity(&$variables) {
  if ($variables['elements']['#entity_type'] == 'field_collection_item') {
    // Replace the default "field_collection_item" suggestion with fences'.
    if (($pos = array_search('field_collection_item', $variables['theme_hook_suggestions'])) !== FALSE) {
      $variables['theme_hook_suggestions'][$pos] = 'entity__fences_no_wrapper';
    }
  }
}

/**
 * A "no wrapper" theme suggestion for entity.
 */
function theme_entity__fences_no_wrapper($variables) {
  return drupal_render($variables['content']);
}

/**
 * Implements hook_field_info_alter().
 */
function fences_field_info_alter(&$info) {
  // Change the default formatter to be the "fields only" formatter.
  if (isset($info['field_collection']['default_formatter'])) {
    $info['field_collection']['default_formatter'] = 'field_collection_fields';
  }
}

/**
 * Retrieve the hook_fences_suggestion_info data.
 */
function fences_get_fences_suggestion_info() {
  $fences = &drupal_static(__FUNCTION__);

  if (is_null($fences)) {
    module_load_include('inc', 'fences', 'fences.admin');
    _fences_get_fences_suggestion_info($fences);
  }
  return $fences;
}
