<?php
/**
 * @file
 * Fences is a module providing configurable field wrappers.
 */

/**
 * Implements hook_form_alter()
 */
function fences_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id){
  $suggestion = fences_get_suggestion($form['#instance']['entity_type'], $form['#instance']['bundle'], $form['#instance']['field_name']);

  // Get the list of suggestions.
  $fences = fences_get_fences_suggestion_info();
  foreach (array_keys($fences['field']) as $key) {
    $options[$key] = $fences['field'][$key]['label'];
  }

  $form['instance']['fences_wrapper'] = array(
    '#type' => 'select',
    '#title' => t('Wrapper markup'),
    '#default_value' => $suggestion ? $suggestion : 'div',
    '#options' => $options,
    '#description' => t('Choose the HTML to use to wrap the field.'),
  );
}

/**
 * Returns the wrapper suggestion if it exists.
 *
 * @see field_info_instance()
 *
 * @param $entity_type
 *   The entity type for the instance.
 * @param $bundle_name
 *   The bundle name for the instance.
 * @param $field_name
 *   The field name for the instance.
 *
 * @return
 *   The fences wrapper suggestion for this field, if set.
 */
function fences_get_suggestion($entity_type, $bundle_name, $field_name) {
  $fences = &drupal_static(__FUNCTION__, array());

  if (!isset($fences[$entity_type][$bundle_name][$field_name])) {
    // Instance info is cached, so this isn't as non-performant as it looks.
    $settings = field_info_instance($entity_type, $field_name, $bundle_name);
    $fences[$entity_type][$bundle_name][$field_name] = isset($settings['fences_wrapper']) ? $settings['fences_wrapper'] : '';
  }

  return $fences[$entity_type][$bundle_name][$field_name];
}

/**
 * Implements hook_form_views_ui_add_item_form_alter().
 */
function fences_form_views_ui_add_item_form_alter(&$form, &$form_state, $form_id) {
  // Add our own submit handler to run before the standard one.
  array_unshift($form['buttons']['submit']['#submit'], 'fences_views_ui_add_item_form_submit');
}

/**
 * Submit handler which runs before views_ui_add_item_form_submit().
 */
function fences_views_ui_add_item_form_submit($form, &$form_state) {
  // Sanity check; this temporary property shouldn't exist before the form is
  // submitted.
  if (isset($form_state['view']->fences_new_fields)) {
    unset($form_state['view']->fences_new_fields);
  }
  // Loop through each of the items that were checked.
  if (!empty($form_state['values']['name']) && is_array($form_state['values']['name'])) {
    foreach (array_keys(array_filter($form_state['values']['name'])) as $field) {
      // Check if the checked item is a field api field.
      if (strpos($field, 'field_data_') === 0) {
        // Find the field's proper name.
        list($table, $field_name) = explode('.', $field, 2);
        if ($cut = strpos($field_name, '$')) {
          $field_name = substr($field_name, 0, $cut);
        }
        // Note that the field has just been added by adding it's name to a
        // temporary property of the view.
        $form_state['view']->fences_new_fields[] = $field_name;
      }
    }
  }
}

/**
 * Alter the views field item form to change some of the default values.
 *
 * Note: we only act on an item if it is among the list of fields added to the
 * view's fences_new_fields property in fences_views_ui_add_item_form_submit().
 */
function fences_form_views_ui_config_item_form_alter(&$form, &$form_state, $form_id) {
  // Check if the current item is a field.
  if ($form_state['type'] == 'field' && isset($form_state['view']->fences_new_fields)) {
    if (!empty($form_state['view']->fences_new_fields)) {
      // Check if the current item is one of the fields we marked earlier.
      $key = array_search($form_state['id'], $form_state['view']->fences_new_fields);
      if ($key !== FALSE) {
        // Disable the label option.
        $form['options']['custom_label']['#default_value'] = FALSE;

        // Since we are altering this fieldset's defaults, expand it.
        $form['options']['style_settings']['#collapsed'] = FALSE;

        // Enable the element_type style to be none.
        $form['options']['element_type_enable']['#default_value'] = TRUE;
        $form['options']['element_type']['#default_value'] = 0;

        // Enable the element_wrapper style to be none.
        $form['options']['element_wrapper_type_enable']['#default_value'] = TRUE;
        $form['options']['element_wrapper_type']['#default_value'] = 0;

        // Disable the default element classes.
        $form['options']['element_default_classes']['#default_value'] = FALSE;

        // Set the field settings to use the field_api for rendering.
        $form['options']['field_api_classes']['#default_value'] = TRUE;

        // Remove this field from the list of items to alter.
        unset($form_state['view']->fences_new_fields[$key]);
      }
    }
    // Remove the temporary property set when we added items.
    if (empty($form_state['view']->fences_new_fields)) {
      unset($form_state['view']->fences_new_fields);
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function fences_preprocess_field(&$variables) {
  // Retrieve the configured suggestion.
  $suggestion = fences_get_suggestion($variables['element']['#entity_type'], $variables['element']['#bundle'], $variables['element']['#field_name']);
  if ($suggestion) {
    // Make fences' suggestions low priority by placing them at the front of the queue.
    $suggestion = 'field__fences_' . $suggestion;
    if (count($variables['items']) > 1) {
      // Add a "-multiple" suggestion if there are more than one field items.
      array_unshift($variables['theme_hook_suggestions'], $suggestion . '_multiple');
    }
    array_unshift($variables['theme_hook_suggestions'], $suggestion);
  }
}

/**
 * Implements hook_css_alter().
 */
function fences_css_alter(&$css) {
  // Replace the field module's CSS with our non-floating inline version.
  if (isset($css['modules/field/theme/field.css']) && $css['modules/field/theme/field.css']['data'] == 'modules/field/theme/field.css') {
    $css['modules/field/theme/field.css']['data'] = drupal_get_path('module', 'fences') . '/field.css';
    if (isset($css['modules/field/theme/field-rtl.css'])) {
      $css['modules/field/theme/field-rtl.css']['data'] = drupal_get_path('module', 'fences') . '/field-rtl.css';
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function fences_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'theme') {
    // Make fences' hook_theme() run last.
    $group = $implementations['fences'];
    unset($implementations['fences']);
    $implementations['fences'] = $group;
  }
}

/**
 * Implements hook_theme().
 */
function fences_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $fences = fences_get_fences_suggestion_info();

  $supported_hooks = array('field');
  foreach ($supported_hooks as $hook) {
    foreach ($fences[$hook] as $suggestion => $data) {
      // Manually register the suggestions for a module, but let hook_theme
      // auto-discover theme-owned suggestions as it normally does.
      if ($fences[$hook][$suggestion]['type'] == 'module') {
        $hook_suggestion = $hook . '__fences_' . str_replace('-', '_', $suggestion);
        foreach (array($hook_suggestion, $hook_suggestion . '_multiple') as $name) {
          $hooks[$name] = array(
            'base hook'      => $hook,
            'render element' => $existing[$hook]['render element'],
            'type'           => $fences[$hook][$suggestion]['type'],
            'theme path'     => $existing[$hook]['theme path'],
            'template'       => str_replace('_', '-', $name),
            'path'           => $fences[$hook][$suggestion]['path'],
          );
        }
      }
    }
  }

  return $hooks;
}

/**
 * Implements hook_theme_registry_alter().
 */
function fences_theme_registry_alter(&$theme_registry) {
  $fences = fences_get_fences_suggestion_info();

  // Manually registering module-based suggestions means they mistakenly get
  // preprocess and process functions registered to them.
  $supported_hooks = array('field');
  foreach ($supported_hooks as $hook) {
    foreach ($fences[$hook] as $suggestion => $data) {
      if ($fences[$hook][$suggestion]['type'] == 'module') {
        $hook_suggestion = $hook . '__fences_' . str_replace('-', '_', $suggestion);
        foreach (array($hook_suggestion, $hook_suggestion . '_multiple') as $name) {
          unset($theme_registry[$name]['preprocess functions']);
          unset($theme_registry[$name]['process functions']);
        }
      }
    }
  }
}

/**
 * Retrieve the hook_fences_suggestion_info data.
 */
function fences_get_fences_suggestion_info() {
  $fences = &drupal_static(__FUNCTION__);

  if (is_null($fences)) {
    $files = array();

    // Call hook_fences_suggestion_info for modules. We need to search each
    // module for template files to get their paths, so we can't use
    // module_invoke_all().
    foreach (module_implements('fences_suggestion_info') as $module) {
      $function = $module . '_fences_suggestion_info';
      if (function_exists($function)) {
        $result = $function();
        if (isset($result) && is_array($result)) {
          // Search the module for template files.
          $files[$module] = drupal_system_listing('/\-\-fences\-.*\.tpl\.php$/', drupal_get_path('module', $module), 'name', 0);
          // Go through each of the results of hook_fences_suggestion_info().
          foreach (array_keys($result) as $hook) {
            foreach (array_keys($result[$hook]) as $suggestion) {
              $template = str_replace('_', '-', $hook . '--fences-' . $suggestion) . '.tpl';
              // Only record the suggestion if a corresponding template file is found.
              if (isset($files[$module][$template])) {
                $fences[$hook][$suggestion] = $result[$hook][$suggestion];
                // We need the path and project type for hook_theme().
                $fences[$hook][$suggestion]['path'] = dirname($files[$module][$template]->uri);
                $fences[$hook][$suggestion]['type'] = 'module';
              }
            }
          }
        }
      }
    }

    // Create a list of the default theme and its base themes.
    $theme_default = $GLOBALS['conf']['theme_default'];
    // We can't use list_themes() here because of #761608.
    $theme_data = _system_rebuild_theme_data();
    if (isset($theme_data[$theme_default]->base_themes)) {
      foreach (array_keys($theme_data[$theme_default]->base_themes) as $base_theme) {
        $themes[$base_theme] = 'base_theme_engine';
      }
    }
    $themes[$theme_default] = 'theme_engine';
    // Include the template.php files of the entire theme stack.
    foreach (array_keys($themes) as $theme) {
      $file = './' . drupal_get_path('theme', $theme) . '/template.php';
      if (file_exists($file)) {
        include_once $file;
      }
    }

    // Call hook_fences_suggestion_info for themes.
    foreach ($themes as $theme => $type) {
      // Search the theme for template files.
      $files[$theme] = drupal_system_listing('/\-\-fences\-.*\.tpl\.php$/', drupal_get_path('theme', $theme), 'name', 0);
      $function = $theme . '_fences_suggestion_info';
      if (function_exists($function)) {
        $result = $function();
        if (isset($result) && is_array($result)) {
          // Go through each of the results of hook_fences_suggestion_info().
          foreach (array_keys($result) as $hook) {
            foreach (array_keys($result[$hook]) as $suggestion) {
              $template = str_replace('_', '-', $hook . '--fences-' . $suggestion) . '.tpl';
              // Only record the suggestion if a corresponding template file is found.
              if (isset($files[$theme][$template])) {
                $fences[$hook][$suggestion] = $result[$hook][$suggestion];
                // We need the project type in hook_theme().
                $fences[$hook][$suggestion]['type'] = $type;
              }
            }
          }
        }
      }
      // If hook_fences_suggestion_info() doesn't exist for the theme, do a
      // "lazy" hook implementation by parsing the file names of matching
      // template files.
      else {
        foreach ($files[$theme] as $template => $data) {
          list($hook, $suggestion) = explode('--', $template);
          $suggestion = str_replace(array('fences-', '-multiple', '.tpl'), '', $suggestion);
          if (!isset($fences[$hook][$suggestion])) {
            $fences[$hook][$suggestion] = array(
              'label'       => $suggestion,
              'description' => t('A <@tag> tag', array('@tag' => $suggestion)),
              'type'        => $type,
            );
          }
        }
      }
    }

    // Sort the tags, but put the "no markup" option first.
    foreach (array_keys($fences) as $hook) {
      $none = $fences[$hook]['none'];
      unset($fences[$hook]['none']);
      ksort($fences[$hook]);
      $fences[$hook] = array('none' => $none) + $fences[$hook];
    }

    // Allow modules and themes to alter the fences info.
    drupal_alter('fences_suggestion_info', $fences);
  }
  return $fences;
}

/**
 * Implements hook_fences_suggestion_info().
 */
function fences_fences_suggestion_info() {
  // Suggestions for the "field" theme hook.
  $fences['field'] = array(
    'none' => array(
      'label' => t('No markup'),
      'description' => t('No wrapping HTML'),
    ),
    'address' => array(
      'label' => t('address'),
      'description' => t('An <address> tag'),
    ),
    'div' => array(
      'label' => t('div'),
      'description' => t('A semantically generic <div> tag. Should only be used as a last resort.'),
    ),
    'figure' => array(
      'label' => t('figure'),
      'description' => t('A <figure> tag'),
    ),
    'pre' => array(
      'label' => t('pre'),
      'description' => t('A <pre> tag'),
    ),
    'pre_code' => array(
      'label'       => t('pre code'),
      'description' => t('Block of preformatted code'),
    ),
    'small' => array(
      'label' => t('small'),
      'description' => t('A <small> tag'),
    ),
    'ul' => array(
      'label' => t('ul'),
      'description' => t('A <ul> tag'),
    ),
  );
  return $fences;
}
