<?php
/**
 * @file
 * Fences is a module providing configurable field wrappers.
 */


/**
 * Implements hook_form_alter()
 */
function fences_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id){
  $bundle = $form_state['build_info']['args'][0]['bundle'];
  $field_name = $form_state['build_info']['args'][0]['field_name'];

  $suggestion = fences_get_suggestion($bundle, $field_name);

  $form['instance']['fences_wrapper'] = array(
    '#type' => 'textfield', 
    '#title' => t('Wrapper markup'),
    '#default_value' => $suggestion ? $suggestion : 'div',
    '#description' => t('Choose the HTML to use to wrap the field.'),
  );
  $form['#submit'][] = 'fences_form_submit';
}

/**
 * Implements hook_form_submit()
 */
function fences_form_submit(&$form, &$form_state) {
  $bundle = $form_state['build_info']['args'][0]['bundle'];
  $fid = $form_state['build_info']['args'][0]['field_id'];
  $field_name = $form_state['build_info']['args'][0]['field_name'];
  $suggestion = $form_state['input']['instance']['fences_wrapper'];

  fences_update_fence_configuration($bundle, $fid, $field_name, $suggestion);
}

/**
 * Function to return the wrapper suggestion if it exists.
 */
function fences_get_suggestion($bundle, $field_name) {
  // On any page load, we are likely to have several fields, so we retrieve and
  // cache all field suggestions.
  $fences = &drupal_static(__FUNCTION__);
  if (is_null($fences)) {
    $fences = array();
    $result = db_query('SELECT bundle, field_name, suggestion FROM {fences}');
    foreach ($result as $row) {
      $fences[$row->bundle][$row->field_name] = $row->suggestion;
    }
  }
  return isset($fences[$bundle][$field_name]) ? $fences[$bundle][$field_name] : NULL;
}

/**
 * Function to update the fences database table.
 */
function fences_update_fence_configuration($bundle, $fid, $field_name, $suggestion) {
  $fence = array(
    'bundle'        => $bundle,
    'machine_name'  => $bundle . '_' . $field_name,
    'fid'           => $fid,
    'field_name'    => $field_name,
    'suggestion'    => $suggestion,
  );

  $suggestion = fences_get_suggestion($bundle, $field_name);

  if ($suggestion) {
    db_update('fences')
      ->fields($fence)
      ->condition('machine_name', $fence['machine_name'])
      ->execute();
  }
  else {
    $wid = db_insert('fences')
      ->fields($fence)
      ->execute();
  }

}

/**
 * Alter the views field item form to change some of the default values.
 * @todo: Make this actually work. Currently cannot change the value from
 * the default value.
 */
function fences_form_views_ui_config_item_form_alter(&$form, &$form_state, $form_id) {
  // Disable the label option
  $form['options']['custom_label']['#default_value'] = FALSE;

  // Set the field settings to use the field_api for rendering.
  $form['options']['field_api_classes']['#default_value'] = TRUE;

  // Disable the default element classes
  $form['options']['element_default_classes']['#default_value'] = FALSE;

  // Enable the element_wrapper style to be none
  $form['options']['element_wrapper_type_enable']['#default_value'] = TRUE;
  $form['options']['element_wrapper_type']['#default_value'] = 0;

  // Enable the element_type style to be none
  $form['options']['element_type_enable']['#default_value'] = TRUE;
  $form['options']['element_type']['#default_value'] = 0;
}

/**
 * @todo: Make this actually work. Currently cannot change the value from
 * the default value.
 */
function fences_form_views_ui_edit_display_form_alter(&$form, &$form_state, $form_id) {
  $form['options']['row_options']['default_field_elements']['#default_value'] = 0;
}

/**
 * Implements hook_preprocess_field()
 */
function fences_preprocess_field(&$vars) {
  $bundle = $vars['element']['#bundle'];
  $field_name = $vars['element']['#field_name'];
  $suggestion = fences_get_suggestion($bundle, $field_name);
  if ($suggestion) {
    // $theme_suggestions[0] = 'field__fences_' . $suggestion;
    // foreach ($vars['theme_hook_suggestions'] as $key => $value) {
    //   $theme_suggestions[$key+1] = $value;
    // }
    // $vars['theme_hook_suggestions'] = $theme_suggestions;
    // or maybe it just needs:
    array_unshift($vars['theme_hook_suggestions'],'field__fences_' . $suggestion);
    // $theme = theme('field__fences_small', $vars);
    // dpm($vars);
    // dpm($theme);
  }
}


/**
 * Implements hook_theme().
 */
function fences_theme($existing, $type, $theme, $path) {
  dpm($type);
  dpm($theme);
  dpm($path);
  dpm($existing);
  // Supplying $fence_type here, but I would like it to be dynamically set.
  $fence_type = 'small';
  return array(
    'field__fences_' . $fence_type => array(
      'render element' => 'field',
      'template' => 'field--fences-' . $fence_type,
      // this will set to module/theme path by default:
      'path' => drupal_get_path('module', 'fences') . '/templates',
    ),
  );
}
