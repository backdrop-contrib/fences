<?php
/**
 * @file
 * Fences is a module providing configurable field wrappers.
 */


/**
 * Implements hook_form_alter()
 */
function fences_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id){
  $bundle = $form_state['build_info']['args'][0]['bundle'];
  $field_name = $form_state['build_info']['args'][0]['field_name'];

  $suggestion = fences_get_suggestion($bundle, $field_name);

  // Get the list of suggestions.
  $fences = fences_get_fences_suggestion_info();
  foreach (array_keys($fences['field']) as $key) {
    $options[$key] = $fences['field'][$key]['label'];
  }

  $form['instance']['fences_wrapper'] = array(
    '#type' => 'select',
    '#title' => t('Wrapper markup'),
    '#default_value' => $suggestion ? $suggestion : 'div',
    '#options' => $options,
    '#description' => t('Choose the HTML to use to wrap the field.'),
  );
  $form['#submit'][] = 'fences_form_submit';
}

/**
 * Implements hook_form_submit()
 */
function fences_form_submit(&$form, &$form_state) {
  $bundle = $form_state['build_info']['args'][0]['bundle'];
  $fid = $form_state['build_info']['args'][0]['field_id'];
  $field_name = $form_state['build_info']['args'][0]['field_name'];
  $suggestion = $form_state['input']['instance']['fences_wrapper'];

  fences_update_fence_configuration($bundle, $fid, $field_name, $suggestion);
}

/**
 * Function to return the wrapper suggestion if it exists.
 */
function fences_get_suggestion($bundle, $field_name) {
  // On any page load, we are likely to have several fields, so we retrieve and
  // cache all field suggestions.
  $fences = &drupal_static(__FUNCTION__);
  if (is_null($fences)) {
    $fences = array();
    $result = db_query('SELECT bundle, field_name, suggestion FROM {fences}');
    foreach ($result as $row) {
      $fences[$row->bundle][$row->field_name] = $row->suggestion;
    }
  }
  return isset($fences[$bundle][$field_name]) ? $fences[$bundle][$field_name] : NULL;
}

/**
 * Function to update the fences database table.
 */
function fences_update_fence_configuration($bundle, $fid, $field_name, $suggestion) {
  $fence = array(
    'bundle'        => $bundle,
    'machine_name'  => $bundle . '_' . $field_name,
    'fid'           => $fid,
    'field_name'    => $field_name,
    'suggestion'    => $suggestion,
  );

  $suggestion = fences_get_suggestion($bundle, $field_name);

  if ($suggestion) {
    db_update('fences')
      ->fields($fence)
      ->condition('machine_name', $fence['machine_name'])
      ->execute();
  }
  else {
    $wid = db_insert('fences')
      ->fields($fence)
      ->execute();
  }

}

/**
 * Alter the views field item form to change some of the default values.
 * @todo: Make this actually work. Currently cannot change the value from
 * the default value.
 */
function fences_form_views_ui_config_item_form_alter(&$form, &$form_state, $form_id) {
  // Disable the label option
  $form['options']['custom_label']['#default_value'] = FALSE;

  // Set the field settings to use the field_api for rendering.
  $form['options']['field_api_classes']['#default_value'] = TRUE;

  // Disable the default element classes
  $form['options']['element_default_classes']['#default_value'] = FALSE;

  // Enable the element_wrapper style to be none
  $form['options']['element_wrapper_type_enable']['#default_value'] = TRUE;
  $form['options']['element_wrapper_type']['#default_value'] = 0;

  // Enable the element_type style to be none
  $form['options']['element_type_enable']['#default_value'] = TRUE;
  $form['options']['element_type']['#default_value'] = 0;
}

/**
 * @todo: Make this actually work. Currently cannot change the value from
 * the default value.
 */
function fences_form_views_ui_edit_display_form_alter(&$form, &$form_state, $form_id) {
  $form['options']['row_options']['default_field_elements']['#default_value'] = 0;
}

/**
 * Implements hook_preprocess_field()
 */
function fences_preprocess_field(&$vars) {
  $bundle = $vars['element']['#bundle'];
  $field_name = $vars['element']['#field_name'];
  $suggestion = fences_get_suggestion($bundle, $field_name);
  if ($suggestion) {
    // $theme_suggestions[0] = 'field__fences_' . $suggestion;
    // foreach ($vars['theme_hook_suggestions'] as $key => $value) {
    //   $theme_suggestions[$key+1] = $value;
    // }
    // $vars['theme_hook_suggestions'] = $theme_suggestions;
    // or maybe it just needs:
    array_unshift($vars['theme_hook_suggestions'],'field__fences_' . $suggestion);
    // $theme = theme('field__fences_small', $vars);
    // dpm($vars);
    // dpm($theme);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function fences_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'theme') {
    // Make fences' hook_theme() run last.
    $group = $implementations['fences'];
    unset($implementations['fences']);
    $implementations['fences'] = $group;
  }
}

/**
 * Implements hook_theme().
 */
function fences_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $fences = fences_get_fences_suggestion_info();

  $supported_hooks = array('field');
  foreach ($supported_hooks as $hook) {
    foreach ($fences[$hook] as $suggestion => $data) {
      $hook_suggestion = $hook . '__fences_' . str_replace('-', '_', $suggestion);
      $hooks[$hook_suggestion] = array(
        'base hook'      => $hook,
        'render element' => $existing[$hook]['render element'],
        // @todo This could also be 'base_theme_engine', etc.
        'type'           => 'module',
        'theme path'     => $existing[$hook]['theme path'],
        'template'       => str_replace('_', '-', $hook_suggestion),
        // @todo Make this work for projects other than fences.
        'path'           => drupal_get_path('module', 'fences') . '/templates',
      );
    }
  }

  return $hooks;
}

/**
 * Retrieve the hook_fences_suggestion_info data.
 */
function fences_get_fences_suggestion_info() {
  $fences = module_invoke_all('fences_suggestion_info');

  // Allow modules and themes to alter the fences info.
  drupal_alter('fences_suggestion_info', $fences);

  return $fences;
}

/**
 * Implements hook_fences_suggestion_info().
 */
function fences_fences_suggestion_info() {
  // Suggestions for the "field" theme hook.
  $fences['field'] = array(
    'none' => array(
      'label' => t('No markup'),
      'description' => t('No wrapping HTML'),
    ),
    'address' => array(
      'label' => t('address'),
      'description' => t('An <address> tag'),
    ),
    'div' => array(
      'label' => t('div'),
      'description' => t('A semantically generic <div> tag. Should only be used as a last resort.'),
    ),
    'figure' => array(
      'label' => t('figure'),
      'description' => t('A <figure> tag'),
    ),
    'pre' => array(
      'label' => t('pre'),
      'description' => t('A <pre> tag'),
    ),
    'precode' => array(
      'label' => t('pre code'),
      'description' => t('A <pre> tag and a <code> tag wrapper'),
    ),
    'small' => array(
      'label' => t('small'),
      'description' => t('A <small> tag'),
    ),
  );
  return $fences;
}
